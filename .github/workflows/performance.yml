name: Performance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance tests weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Lighthouse performance audit
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Start services
        run: |
          # Start API
          cd apps/api
          pnpm run dev &
          API_PID=$!
          
          # Start web
          cd ../web
          pnpm run preview &
          WEB_PID=$!
          
          # Wait for services to start
          sleep 15
          
          # Store PIDs for cleanup
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4173
            http://localhost:4173/builder
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Cleanup services
        if: always()
        run: |
          if [ ! -z "$API_PID" ]; then
            kill $API_PID || true
          fi
          if [ ! -z "$WEB_PID" ]; then
            kill $WEB_PID || true
          fi

  # Bundle size analysis
  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Analyze bundle size
        run: |
          echo "📊 Analyzing bundle sizes..."
          
          # Web app bundle analysis
          if [ -d "apps/web/build" ]; then
            echo "Web app bundle size:"
            du -sh apps/web/build/*
            echo ""
            echo "Largest files:"
            find apps/web/build -type f -exec du -h {} + | sort -rh | head -10
          fi
          
          # API bundle analysis
          if [ -d "apps/api/dist" ]; then
            echo "API bundle size:"
            du -sh apps/api/dist/*
            echo ""
            echo "Largest files:"
            find apps/api/dist -type f -exec du -h {} + | sort -rh | head -10
          fi

      - name: Check bundle size limits
        run: |
          echo "🔍 Checking bundle size limits..."
          
          # Set size limits (adjust as needed)
          WEB_MAX_SIZE=5000000  # 5MB
          API_MAX_SIZE=10000000 # 10MB
          
          # Check web app size
          if [ -d "apps/web/build" ]; then
            WEB_SIZE=$(du -sb apps/web/build | cut -f1)
            if [ $WEB_SIZE -gt $WEB_MAX_SIZE ]; then
              echo "❌ Web app bundle size ($WEB_SIZE bytes) exceeds limit ($WEB_MAX_SIZE bytes)"
              exit 1
            else
              echo "✅ Web app bundle size ($WEB_SIZE bytes) is within limit"
            fi
          fi
          
          # Check API size
          if [ -d "apps/api/dist" ]; then
            API_SIZE=$(du -sb apps/api/dist | cut -f1)
            if [ $API_SIZE -gt $API_MAX_SIZE ]; then
              echo "❌ API bundle size ($API_SIZE bytes) exceeds limit ($API_MAX_SIZE bytes)"
              exit 1
            else
              echo "✅ API bundle size ($API_SIZE bytes) is within limit"
            fi
          fi

  # Load testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Start services
        run: |
          # Start API
          cd apps/api
          pnpm run dev &
          API_PID=$!
          
          # Start web
          cd ../web
          pnpm run preview &
          WEB_PID=$!
          
          # Wait for services to start
          sleep 15
          
          # Store PIDs for cleanup
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV

      - name: Install load testing tools
        run: |
          # Install Artillery for load testing
          npm install -g artillery

      - name: Run load tests
        run: |
          echo "🚀 Running load tests..."
          
          # Create load test configuration
          cat > load-test.yml << EOF
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 20
                name: "Ramp up load"
              - duration: 60
                arrivalRate: 30
                name: "Sustained load"
          scenarios:
            - name: "API Health Check"
              weight: 50
              flow:
                - get:
                    url: "/health"
            - name: "Pipeline Execution"
              weight: 30
              flow:
                - post:
                    url: "/api/pipelines/execute"
                    json:
                      pipeline: [{"$match": {}}]
            - name: "Get Pipelines"
              weight: 20
              flow:
                - get:
                    url: "/api/pipelines"
          EOF
          
          # Run load test
          artillery run load-test.yml --output load-test-report.json
          
          # Generate report
          artillery report load-test-report.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: |
            load-test-report.json
            load-test-report.html

      - name: Cleanup services
        if: always()
        run: |
          if [ ! -z "$API_PID" ]; then
            kill $API_PID || true
          fi
          if [ ! -z "$WEB_PID" ]; then
            kill $WEB_PID || true
          fi

  # Memory usage analysis
  memory-analysis:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Start services with memory monitoring
        run: |
          # Start API with memory monitoring
          cd apps/api
          node --max-old-space-size=512 --expose-gc src/index.ts &
          API_PID=$!
          
          # Start web
          cd ../web
          pnpm run preview &
          WEB_PID=$!
          
          # Wait for services to start
          sleep 15
          
          # Store PIDs for cleanup
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV

      - name: Monitor memory usage
        run: |
          echo "🧠 Monitoring memory usage..."
          
          # Monitor memory for 2 minutes
          for i in {1..24}; do
            echo "Memory usage at $(date):"
            ps aux | grep -E "(node|pnpm)" | grep -v grep
            echo "---"
            sleep 5
          done

      - name: Cleanup services
        if: always()
        run: |
          if [ ! -z "$API_PID" ]; then
            kill $API_PID || true
          fi
          if [ ! -z "$WEB_PID" ]; then
            kill $WEB_PID || true
          fi

  # Performance regression detection
  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Compare bundle sizes
        run: |
          echo "📊 Comparing bundle sizes..."
          
          # Get current branch bundle size
          CURRENT_WEB_SIZE=$(du -sb apps/web/build | cut -f1)
          CURRENT_API_SIZE=$(du -sb apps/api/dist | cut -f1)
          
          # Checkout base branch
          git checkout ${{ github.event.pull_request.base.sha }}
          pnpm install --frozen-lockfile
          pnpm run build
          
          # Get base branch bundle size
          BASE_WEB_SIZE=$(du -sb apps/web/build | cut -f1)
          BASE_API_SIZE=$(du -sb apps/api/dist | cut -f1)
          
          # Calculate size difference
          WEB_DIFF=$((CURRENT_WEB_SIZE - BASE_WEB_SIZE))
          API_DIFF=$((CURRENT_API_SIZE - BASE_API_SIZE))
          
          echo "Web app size change: $WEB_DIFF bytes"
          echo "API size change: $API_DIFF bytes"
          
          # Check if size increase is significant (more than 100KB)
          if [ $WEB_DIFF -gt 100000 ]; then
            echo "⚠️  Web app bundle size increased by more than 100KB"
            exit 1
          fi
          
          if [ $API_DIFF -gt 100000 ]; then
            echo "⚠️  API bundle size increased by more than 100KB"
            exit 1
          fi
          
          echo "✅ Bundle size changes are within acceptable limits"

  # Performance summary
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse, bundle-size, load-test, memory-analysis]
    if: always()
    steps:
      - name: Performance Summary
        run: |
          echo "🚀 Performance Test Summary"
          echo "=========================="
          echo "Lighthouse: ${{ needs.lighthouse.result }}"
          echo "Bundle Size: ${{ needs.bundle-size.result }}"
          echo "Load Test: ${{ needs.load-test.result }}"
          echo "Memory Analysis: ${{ needs.memory-analysis.result }}"
          echo "=========================="
          
          if [[ "${{ needs.lighthouse.result }}" == "success" && 
                "${{ needs.bundle-size.result }}" == "success" && 
                "${{ needs.load-test.result }}" == "success" && 
                "${{ needs.memory-analysis.result }}" == "success" ]]; then
            echo "✅ All performance tests passed!"
            exit 0
          else
            echo "❌ Some performance tests failed"
            exit 1
          fi
