name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '22.12.0'
  PNPM_VERSION: '9'

jobs:
  # Dependency vulnerability scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          # Install security scanning tools
          npm install -g audit-ci
          
          # Run audit with specific thresholds
          audit-ci --moderate --high --critical

  # Code security scan
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint security plugin
        run: |
          echo "üîç Running ESLint security scan..."
          # Install security ESLint plugin
          npm install -g eslint-plugin-security
          
          # Run security linting
          npx eslint apps/ --ext .js,.ts,.svelte --plugin security --rule 'security/detect-object-injection: error' || true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/svelte
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Container security scan (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          # Build Docker image for scanning
          if [ -f "Dockerfile" ]; then
            docker build -t pipe-lens:security-scan .
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pipe-lens:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "üìÑ Checking license compliance..."
          # Install license checker
          npm install -g license-checker
          
          # Check licenses
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --excludePrivatePackages

  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm run build

      - name: Start web server
        run: |
          cd apps/web
          pnpm run preview &
          sleep 10

      - name: Check security headers
        run: |
          echo "üîí Checking security headers..."
          # Install security headers checker
          npm install -g security-headers
          
          # Check security headers
          curl -I http://localhost:4173 | security-headers || true

  # Dependency update check
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          pnpm outdated || true

      - name: Check for security updates
        run: |
          echo "üîí Checking for security updates..."
          pnpm audit --audit-level low || true

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, license-check, sast]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "üõ°Ô∏è Security Scan Summary"
          echo "========================"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Code Scan: ${{ needs.code-scan.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "License Check: ${{ needs.license-check.result }}"
          echo "SAST Analysis: ${{ needs.sast.result }}"
          echo "========================"
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.code-scan.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.sast.result }}" == "success" ]]; then
            echo "‚úÖ All security checks passed!"
            exit 0
          else
            echo "‚ùå Some security checks failed"
            exit 1
          fi
