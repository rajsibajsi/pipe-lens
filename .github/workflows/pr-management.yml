name: PR Management

on:
  pull_request:
    types: [opened, synchronize, closed]
  issues:
    types: [opened, labeled, unlabeled]

jobs:
  # PR validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR
        run: |
          echo "🔍 Validating PR..."
          
          # Check if PR has a description
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "❌ PR description is missing"
            exit 1
          fi
          
          # Check if PR title follows convention
          TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$TITLE" =~ ^(feat|fix|chore|docs|style|refactor|test|perf|ci|build|revert)(\(.+\))?: .+ ]]; then
            echo "⚠️  PR title doesn't follow conventional commit format"
            echo "Expected format: type(scope): description"
            echo "Example: feat(auth): add user login functionality"
          fi
          
          # Check if PR is targeting the correct branch
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          if [[ "$BASE_BRANCH" != "main" && "$BASE_BRANCH" != "develop" ]]; then
            echo "⚠️  PR is targeting $BASE_BRANCH instead of main or develop"
          fi
          
          echo "✅ PR validation completed"

  # Auto-assign reviewers
  auto-assign:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Auto assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            // Auto-assign based on file changes
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });
            
            const reviewers = new Set();
            
            // Check for specific file patterns
            for (const file of files.data) {
              if (file.filename.startsWith('apps/api/')) {
                reviewers.add('api-reviewer'); // Replace with actual username
              }
              if (file.filename.startsWith('apps/web/')) {
                reviewers.add('frontend-reviewer'); // Replace with actual username
              }
              if (file.filename.includes('test') || file.filename.includes('spec')) {
                reviewers.add('qa-reviewer'); // Replace with actual username
              }
            }
            
            // Assign reviewers if any found
            if (reviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number: number,
                reviewers: Array.from(reviewers)
              });
              
              console.log(`Assigned reviewers: ${Array.from(reviewers).join(', ')}`);
            }

  # Label PRs
  label-pr:
    name: Label PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Label PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            const labels = [];
            
            // Determine labels based on PR content
            const title = pr.data.title.toLowerCase();
            const body = (pr.data.body || '').toLowerCase();
            
            if (title.includes('feat') || title.includes('feature')) {
              labels.push('enhancement');
            }
            if (title.includes('fix') || title.includes('bug')) {
              labels.push('bug');
            }
            if (title.includes('chore') || title.includes('maintenance')) {
              labels.push('maintenance');
            }
            if (title.includes('docs') || title.includes('documentation')) {
              labels.push('documentation');
            }
            if (title.includes('test') || title.includes('testing')) {
              labels.push('testing');
            }
            
            // Add size labels based on changes
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });
            
            const totalChanges = files.data.reduce((sum, file) => sum + file.changes, 0);
            
            if (totalChanges < 50) {
              labels.push('size/small');
            } else if (totalChanges < 200) {
              labels.push('size/medium');
            } else {
              labels.push('size/large');
            }
            
            // Add labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }

  # Check for breaking changes
  breaking-changes:
    name: Check Breaking Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check for breaking changes
        run: |
          echo "🔍 Checking for breaking changes..."
          
          # Check PR title and body for breaking change indicators
          TITLE="${{ github.event.pull_request.title }}"
          BODY="${{ github.event.pull_request.body }}"
          
          if [[ "$TITLE" =~ BREAKING\ CHANGE ]] || [[ "$BODY" =~ BREAKING\ CHANGE ]]; then
            echo "⚠️  Breaking changes detected in PR"
            echo "Please ensure the PR description clearly explains the breaking changes"
          fi
          
          # Check for major version changes in package.json
          if git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep -q package.json; then
            echo "📦 Package.json changes detected"
            echo "Please review version changes carefully"
          fi

  # Issue management
  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Auto-label issues
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get issue details
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: number
            });
            
            const labels = [];
            const title = issue.data.title.toLowerCase();
            const body = (issue.data.body || '').toLowerCase();
            
            // Determine labels based on issue content
            if (title.includes('bug') || title.includes('error') || title.includes('crash')) {
              labels.push('bug');
            }
            if (title.includes('feature') || title.includes('enhancement') || title.includes('request')) {
              labels.push('enhancement');
            }
            if (title.includes('question') || title.includes('help')) {
              labels.push('question');
            }
            if (title.includes('documentation') || title.includes('docs')) {
              labels.push('documentation');
            }
            
            // Add priority labels
            if (title.includes('urgent') || title.includes('critical') || title.includes('asap')) {
              labels.push('priority/high');
            } else if (title.includes('low') || title.includes('minor')) {
              labels.push('priority/low');
            } else {
              labels.push('priority/medium');
            }
            
            // Add labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }

  # Welcome new contributors
  welcome-contributor:
    name: Welcome Contributor
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Check if first-time contributor
        id: check_contributor
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const author = context.payload.pull_request.user.login;
            
            // Check if this is the first PR from this contributor
            const prs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'all',
              author: author
            });
            
            const isFirstTime = prs.data.length === 1;
            console.log(`Is first-time contributor: ${isFirstTime}`);
            return { isFirstTime };

      - name: Welcome first-time contributor
        if: steps.check_contributor.outputs.isFirstTime == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Add welcome comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `🎉 Welcome to the project, @${{ github.event.pull_request.user.login }}! 
              
              Thank you for your first contribution! We appreciate you taking the time to help improve this project.
              
              Please make sure to:
              - [ ] Follow our coding standards
              - [ ] Add tests for new functionality
              - [ ] Update documentation if needed
              
              Our maintainers will review your PR soon. Feel free to ask questions if you need any help!`
            });
